### OpenCOBOL Test Suite				-*- m4 -*-

## Copyright (C) 2003 Keisuke Nishida
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2, or (at your option)
## any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this software; see the file COPYING.  If not, write to
## the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
## Boston, MA 02111-1307 USA


AT_SETUP([Source file not found])

AT_CHECK([${COMPILE_ONLY} prog.cob], [1], ,
[prog.cob: No such file or directory
])

AT_CLEANUP

AT_SETUP([Copy file not found])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       COPY "copy.inc".
       PROCEDURE        DIVISION.
           STOP RUN.
])

AT_CHECK([${COMPILE_ONLY} prog.cob], [1], ,
[prog.cob:6: copy.inc: No such file or directory
])

AT_CLEANUP


AT_SETUP([LOCAL-STORAGE])

AT_DATA([callee.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      callee.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 WRK-X         PIC XXX VALUE "abc".
       LOCAL-STORAGE    SECTION.
       01 LCL-X         PIC XXX VALUE "abc".
       PROCEDURE        DIVISION.
           DISPLAY "WRK-X = " WRK-X.
           DISPLAY "LCL-X = " LCL-X.
           MOVE ZERO TO WRK-X LCL-X.
           EXIT PROGRAM.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "callee".
           CALL "callee".
           STOP RUN.
])

AT_CHECK([${COMPILE_MODULE} callee.cob])
AT_CHECK([${COMPILE} -o prog caller.cob])
AT_CHECK([./prog], [0],
[WRK-X = abc
LCL-X = abc
WRK-X = 000
LCL-X = abc
])

AT_CLEANUP


## MOVE statement

AT_SETUP([MOVE with refmod])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC 9(4) VALUE 0.
       PROCEDURE        DIVISION.
           MOVE "1" TO X(1:1).
           DISPLAY X NO ADVANCING.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [1000])

AT_CLEANUP

AT_SETUP([MOVE with refmod])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "1234".
       01 Y             PIC X(4) VALUE "abcd".
       01 I             PIC 9 VALUE 1.
       PROCEDURE        DIVISION.
           MOVE X(1:I) TO Y.
           DISPLAY Y NO ADVANCING.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [1   ])

AT_CLEANUP

AT_SETUP([MOVE with group refmod])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC 9999 VALUE 1234.
       PROCEDURE        DIVISION.
           MOVE "99" TO G(3:2).
           DISPLAY G NO ADVANCING.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [1299])

AT_CLEANUP

AT_SETUP([MOVE indexes])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X OCCURS 10 INDEXED I.
       PROCEDURE        DIVISION.
           SET I TO ZERO.
           MOVE I TO X(1).
           DISPLAY X(1) NO ADVANCING.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [0])

AT_CLEANUP

AT_SETUP([MOVE X"00"])

AT_DATA([dump.c], [
int dump (unsigned char *data)
{
  printf ("%02x%02x%02x", data[[0]], data[[1]], data[[2]]);
  return 0;
}
])

AT_CHECK([${CC} -shared -o dump.so dump.c])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC XXX.
       PROCEDURE        DIVISION.
           MOVE X"000102" TO X.
           CALL "dump" USING X.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [000102])

AT_CLEANUP


## OCCURS clause

AT_SETUP([Level 01 subscripts])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X OCCURS 10.
       PROCEDURE        DIVISION.
           STOP RUN.
])

AT_CHECK([${COMPILE_ONLY} prog.cob], [1], ,
[prog.cob:6: level 01 item `X' cannot have OCCURS clause
])

AT_CLEANUP


## Expressions

AT_SETUP([Ambiguous AND/OR (1)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           IF 3 = 1 AND 2 OR 3
               DISPLAY "OK"
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE_ONLY} prog.cob], [0], ,
[prog.cob:6: warning: suggest parentheses around AND within OR
])

AT_CLEANUP

AT_SETUP([Ambiguous AND/OR (2)])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       PROCEDURE        DIVISION.
           IF 3 = 1 OR 2 AND 3
               DISPLAY "NO"
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE_ONLY} prog.cob], [0], ,
[prog.cob:6: warning: suggest parentheses around AND within OR
])

AT_CLEANUP

AT_SETUP([Class check with reference modification])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(6) VALUE "123   ".
       PROCEDURE        DIVISION.
           IF X(1:3) NUMERIC
               DISPLAY "OK" NO ADVANCING
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [OK])

AT_CLEANUP


## CALL statement

AT_SETUP([CALL m1. CALL m2. CALL m1.])

AT_DATA([m1.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      m1.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC 9(4).
       PROCEDURE        DIVISION.
           COMPUTE X = 1 + 2.
           DISPLAY X.
])

AT_DATA([m2.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      m2.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC 9(4).
       PROCEDURE        DIVISION.
           COMPUTE X = 3 + 4.
           DISPLAY X.
])

AT_DATA([caller.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      caller.
       PROCEDURE        DIVISION.
           CALL "m1".
           CALL "m2".
           CALL "m1".
           STOP RUN.
])

AT_CHECK([${COMPILE_MODULE} m1.cob])
AT_CHECK([${COMPILE_MODULE} m2.cob])
AT_CHECK([${COMPILE} -o caller caller.cob])

AT_CHECK([./caller], [0],
[0003
0007
0003
])

AT_CLEANUP


## INSPECT

AT_SETUP([INSPECT REPLACING LEADING ZEROS BY SPACES])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC X(4) VALUE "0001".
       PROCEDURE        DIVISION.
           INSPECT X REPLACING LEADING ZEROS BY SPACES.
           DISPLAY X NO ADVANCING.
           STOP RUN.
])

AT_CHECK([${COMPILE} prog.cob])
AT_CHECK([./prog], [0], [   1])

AT_CLEANUP


AT_SETUP([88 with FILLER])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 FILLER        PIC X VALUE SPACE.
         88 X           VALUE "X".
       PROCEDURE        DIVISION.
           IF X
               DISPLAY "NO" NO ADVANCING
           END-IF.
           SET X TO TRUE.
           IF X
               DISPLAY "OK" NO ADVANCING
           END-IF.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [OK])

AT_CLEANUP

AT_SETUP([non-overflow after overflow])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X             PIC 9(2) VALUE 0.
       01 Y             PIC 9(2) VALUE 0.
       PROCEDURE        DIVISION.
           COMPUTE X = 100.
           COMPUTE Y = 99.
           DISPLAY Y NO ADVANCING.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [99])

AT_CLEANUP


AT_SETUP([STRING with subscript reference])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 G.
         02 X           PIC X(3) OCCURS 3.
       PROCEDURE        DIVISION.
           STRING "abc" INTO X(1).
           DISPLAY X(1) NO ADVANCING.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [abc])

AT_CLEANUP


AT_SETUP([First READ on an empty SEQUENTIAL INDEXED file])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       ENVIRONMENT      DIVISION.
       INPUT-OUTPUT     SECTION.
       FILE-CONTROL.
       SELECT TEST-FILE ASSIGN       "./TEST-FILE"
                        ORGANIZATION IS  INDEXED
                        ACCESS MODE  IS  SEQUENTIAL
                        RECORD KEY   IS  TEST-KEY.
       DATA             DIVISION.
       FILE             SECTION.
       FD TEST-FILE.
       01 TEST-KEY      PIC X(10).
       PROCEDURE        DIVISION.
           OPEN  OUTPUT TEST-FILE.
           CLOSE TEST-FILE.
           OPEN  INPUT  TEST-FILE.
           READ  TEST-FILE
               AT END
                   DISPLAY "OK" NO ADVANCING
           END-READ.
           CLOSE TEST-FILE.
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], [OK])

AT_CLEANUP


AT_SETUP([PIC ZZZ-, ZZZ+])

AT_DATA([prog.cob], [
       IDENTIFICATION   DIVISION.
       PROGRAM-ID.      prog.
       DATA             DIVISION.
       WORKING-STORAGE  SECTION.
       01 X-ZZZN        PIC ZZZ-.
       01 X-ZZZP        PIC ZZZ+.
       PROCEDURE        DIVISION.
           MOVE -1 TO X-ZZZN. DISPLAY "(" X-ZZZN ")".
           MOVE  0 TO X-ZZZN. DISPLAY "(" X-ZZZN ")".
           MOVE +1 TO X-ZZZN. DISPLAY "(" X-ZZZN ")".
           MOVE -1 TO X-ZZZP. DISPLAY "(" X-ZZZP ")".
           MOVE  0 TO X-ZZZP. DISPLAY "(" X-ZZZP ")".
           MOVE +1 TO X-ZZZP. DISPLAY "(" X-ZZZP ")".
           STOP RUN.
])

AT_CHECK([${COMPILE} -o prog prog.cob])
AT_CHECK([./prog], [0], 
[(  1-)
(    )
(  1 )
(  1-)
(    )
(  1+)
])

AT_CLEANUP
