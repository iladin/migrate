\input texinfo  @c -*-texinfo-*-
@c %**start of header
@setfilename open-cobol.info
@settitle OpenCOBOL Manual
@footnotestyle end
@setchapternewpage odd
@c %**end of header

@include version.texi

@ifinfo
@dircategory COBOL
@direntry
* OpenCOBOL: (open-cobol).      A COBOL compiler
@end direntry

This file documents OpenCOBOL, a COBOL compiler

Copyright @copyright{} 2002 Keisuke Nishida

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries a copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end ifinfo

@titlepage
@title OpenCOBOL Manual
@subtitle for OpenCOBOL @value{VERSION}
@author Keisuke Nishida

@page
@vskip 0pt plus 1filll
Edition @value{EDITION} @*
Updated for OpenCOBOL @value{VERSION} @*
@value{UPDATED} @*

Copyright @copyright{} 2002 Keisuke Nishida

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.
@end titlepage

@contents

@node Top, Getting Started, (dir), (dir)
@top OpenCOBOL Manual

OpenCOBOL is an open-source COBOL compiler, which translates COBOL
programs to C code as the intermediate language.

This manual corresponds to OpenCOBOL @value{VERSION}.

@menu
* Getting Started::             Introduction to OpenCOBOL
* Compile::                     How to compile COBOL programs
* C Interface::                 Using COBOL Programs with C Programs
* Customize::                   Customize options

@detailmenu
 --- The Detailed Node Listing ---

Getting Started

* Hello World!::                Hello World!

How to Compile

* Source Format::               Source Format
* Dynamic Linking::             Dynamic Linking
* Static Linking::              Static Linking

C Interface

* Main C Program::              Writing Main Program in C
* C to COBOL::                  Using COBOL Programs from C
* COBOL to C::                  Using C Programs from COBOL

Using COBOL Programs from C

* Static C to COBOL::           Static linking with COBOL programs
* Dynamic C to COBOL::          Dynamic linking with COBOL programs

Using C Programs from COBOL

* Static COBOL to C::           Static linking with C programs
* Dynamic COBOL to C::          Static linking with C programs

@end detailmenu
@end menu

@node Getting Started, Compile, Top, Top
@chapter Getting Started

@menu
* Hello World!::                Hello World!
@end menu

@node Hello World!,  , Getting Started, Getting Started
@section Hello World!

This is a sample code that displays ``Hello World'':

@example
---- hello.cob -------------------------
*> Hello World Program
IDENTIFICATION DIVISION.
PROGRAM-ID. hello.
PROCEDURE DIVISION.
DISPLAY "Hello World!".
STOP RUN.
----------------------------------------
@end example

The compiler program is @code{cobc}, which is executed as follows:

@example
% cobc hello.cob
% ./hello
Hello World!
@end example

The executable program name (i.e., @file{hello} in this case) is
determined from the source file name (i.e., @file{hello.cob}) by
removing the file extension.

You can specify the executable name by giving option @code{-o} to
@code{cobc} as follows:

@example
% cobc -o hello-world hello.cob 
% ./hello-world
Hello World!
@end example

@node Compile, C Interface, Getting Started, Top
@chapter How to Compile

This chapter describes how to compile COBOL programs using OpenCOBOL.

@menu
* Source Format::               Source Format
* Dynamic Linking::             Dynamic Linking
* Static Linking::              Static Linking
@end menu

@node Source Format, Dynamic Linking, Compile, Compile
@section Source Format

OpenCOBOL is able to handle two source format: the traditional
@samp{fixed format} and the new @samp{free format}.

There are three methods of specifying a format:

@enumerate
@item
Automatic determination

OpenCOBOL determines the source format of a given file by inspecting
the first six characters in the source file.

If the first six characters are all digits or spaces, the format will
be considered to be fixed format.  Otherwise, it will be free format.

@item
Compiler option

Source format can be explicitly specified by giving one of the
following compiler options to @code{cobc}:

@table @code
@item -F
Fixed format.
@item -X
Free format.
@end table

@item
Compile-time option (not implemented)

OpenCOBOL supports COBOL2002 compile-time option @code{SOURCE FORMAT},
which is specified within the source file as follows:

@example
>>SOURCE FORMAT IS FREE
IDENTIFICATION DIVISION.
...
@end example
@end enumerate

@node Dynamic Linking, Static Linking, Source Format, Compile
@section Dynamic Linking

CALL statement is implemented by dynamic linking by default.
Follow these steps to run multiple programs:

@enumerate
@item
Compile module programs with option @code{-m}:
@example
% cobc -m module.cob
@end example

@item
Compile the main program:
@example
% cobc main.cob
@end example

@item
Set the environment variable @code{COB_LIBRARY_PATH},
put the module file (i.e., @file{module.so}) there,
and run the main program.

@example
% export COB_LIBRARY_PATH=/somewhere
% cp module.so /somewhere
% ./main
@end example
@end enumerate

Note that the module's file name without extension (i.e.,
@file{module} in this case) must be identical to PROGRAM-ID.

@node Static Linking,  , Dynamic Linking, Compile
@section Static Linking

Subprograms can be statically linked with the main program
with option @code{-static}.

@example
% cobc -c -static main.cob
% cobc -c -static module.cob
% cobc -o hello main.o module.o
% ./hello
Hello World!
@end example

@node C Interface, Customize, Compile, Top
@chapter C Interface

This chapter describes how to combine C programs with COBOL programs.

@menu
* Main C Program::              Writing Main Program in C
* C to COBOL::                  Using COBOL Programs from C
* COBOL to C::                  Using C Programs from COBOL
@end menu

@node Main C Program, C to COBOL, C Interface, C Interface
@section Writing Main Program in C

Include @file{libcob.h} in your C program, and call cob_init before
using any COBOL module:

@example
#include <libcob.h>

int
main (int argc, char **argv)
@{
  /* initialize your program */
  ...

  /* initialize the COBOL run-time library */
  cob_init (argc, argv);

  /* rest of your program */
  ...
@}
@end example

You can give 0 and NULL to cob_init if you do not want to pass command
line arguments to COBOL.

The function @code{cob_set_library_path} can be used to set the
library path, which is equivalent to setting the environment variable
@code{COB_LIBRARY_PATH}.

C programs are compiled as follows:

@example
gcc -c `cob-config --cflags` main.c
@end example

The compiled code must be linked with libcob as follows:

@example
cc -o main main.o `cob-config --libs`
@end example

@node C to COBOL, COBOL to C, Main C Program, C Interface
@section Using COBOL Programs from C

@menu
* Static C to COBOL::           Static linking with COBOL programs
* Dynamic C to COBOL::          Dynamic linking with COBOL programs
@end menu

@node Static C to COBOL, Dynamic C to COBOL, C to COBOL, C to COBOL
@subsection Static linking with COBOL programs

Let's think about calling the following COBOL module from C:

@example
---- say.cob ---------------------------
IDENTIFICATION DIVISION.
PROGRAM-ID. say.
ENVIRONMENT DIVISION.
DATA DIVISION.
LINKAGE SECTION.
01 HELLO PIC X(6).
01 WORLD PIC X(6).

PROCEDURE DIVISION USING HELLO WORLD.
DISPLAY HELLO WORLD.
EXIT PROGRAM.
----------------------------------------
@end example

This program accepts two arguments, displays them, and exit.

From the viewpoint of C, the above program is equivalent to a function
with name @code{say} that accepts two @code{char *} arguments and
returns @code{int}.  That is, the prototype is declared as follows:

@example
extern int say (char *hello, char *world);
@end example

Thus, you can use the COBOL module from the following C program:

@example
---- hello.c ---------------------------
#include <libcob.h>

extern int say (char *hello, char *world);

int
main ()
@{
  int ret;
  char hello[6] = "Hello ";
  char world[6] = "World!";

  cob_init (0, NULL);

  ret = say (hello, world);

  return ret;
@}
----------------------------------------
@end example

Compile them as follows:

@example
% cc -c `cob-config --cflags` hello.c
% cobc -c -m say.cob
% cobc -o hello hello.o say.o
% ./hello
Hello World!
@end example

@node Dynamic C to COBOL,  , Static C to COBOL, C to COBOL
@subsection Dynamic linking with COBOL programs

You can find a COBOL module having a specific PROGRAM-ID by using a C
function @code{cob_resolve}, which takes a string argument and returns
the pointer to the COBOL module.

@code{cob_resolve} returns NULL if there is no module.  In this case,
the function @code{cob_resolve_error} gives the error message.

The following is an example:

@example
---- hello-dynamic.c -------------------
#include <libcob.h>

int (*say) (char *hello, char *world);

int
main ()
@{
  int ret;
  char hello[6] = "Hello ";
  char world[6] = "World!";

  cob_init (0, NULL);

  /* find the module with PROGRAM-ID "say". */
  say = cob_resolve ("say");

  /* if there is no such module, show error and exit */
  if (say == NULL) @{
    fprintf (stderr, "%s\n", cob_resolve_error ());
    exit (1);
  @}

  /* call the module found and exit with the return code */
  ret = say (hello, world);

  return ret;
@}
----------------------------------------
@end example

Compile them as follows:

@example
% cc -c `cob-config --cflags` hello-dynamic.c 
% cobc -o hello hello-dynamic.o
% cobc -m say.cob
% export COB_LIBRARY_PATH=.
% ./hello
Hello World!
@end example

@node COBOL to C,  , C to COBOL, C Interface
@section Using C Programs from COBOL

@menu
* Static COBOL to C::           Static linking with C programs
* Dynamic COBOL to C::          Static linking with C programs
@end menu

@node Static COBOL to C, Dynamic COBOL to C, COBOL to C, COBOL to C
@subsection Static linking with C programs

Let's think about calling the following C function from COBOL:

@example
---- say.c -----------------------------
int
say (char *hello, char *world)
@{
  int i;
  for (i = 0; i < 6; i++)
    putchar (hello[i]);
  for (i = 0; i < 6; i++)
    putchar (world[i]);
  putchar ('\n');
  return 0;
@}
----------------------------------------
@end example

This program is equivalent to the foregoing @file{say.cob}.

Note that the arguments passed from COBOL programs are not terminated
with the null character (i.e., @code{\0}).

This program can be used in the same way with ordinary COBOL programs:

@example
---- hello.cob -------------------------
IDENTIFICATION DIVISION.
PROGRAM-ID. hello.
ENVIRONMENT DIVISION.
DATA DIVISION.
WORKING-STORAGE SECTION.
01 HELLO PIC X(6) VALUE "Hello ".
01 WORLD PIC X(6) VALUE "World!".

PROCEDURE DIVISION.
CALL "say" USING HELLO WORLD.
STOP RUN.
----------------------------------------
@end example

Compile them as follows:

@example
% cc -c say.c
% cobc -c -static hello.cob
% cobc -o hello hello.o say.o
% ./hello
Hello World!
@end example

@node Dynamic COBOL to C,  , Static COBOL to C, COBOL to C
@subsection Dynamic linking with C programs

If you want to create a dynamic module from the C program,
compile it with option @code{-shared}:

@example
% cc -shared -o say.so say.c
% cobc -o hello hello.cob
% export COB_LIBRARY_PATH=.
% ./hello
Hello World!
@end example

@node Customize,  , C Interface, Top
@chapter Customize

Environment variables (default value):

@table @code
@item COB_CC
C compiler ("gcc")
@item COB_COBPP
COBOL preprocessor ("cobpp")
@item COB_CFLAGS
Flags to be used with the C compiler ("-I$(PREFIX)/include")
@item COB_LIBS
Libraries to be linked ("-L$(PREFIX)/lib -lcob")
@item COB_LIBRARY_PATH
Library path (".:$(PREFIX)/lib/open-cobol")
@end table

@bye

@c Local Variables:
@c mode:outline-minor
@c outline-regexp:"@\\(ch\\|sec\\|subs\\)"
@c End:
